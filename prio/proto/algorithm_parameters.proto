// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package private_statistics.prio.proto;

option java_multiple_files = true;

// Parameters for the Prio algorithm https://crypto.stanford.edu/prio/
message PrioAlgorithmParameters {
  // Number of bins for this aggregation.
  optional int32 bins = 1;

  // LINT.IfChange(default_epsilon)
  optional double epsilon = 2 [default = 12.0];
  // LINT.ThenChange(//depot/google3/third_party/private_statistics/prio/constants.h:default_epsilon)

  // The value of prime p used in this aggregation. The prime needs to be
  // congruent to 1 modulo 2 * next_power_two(bins + 1) to support Fourier
  // transform.
  // The aggregation will be performed modulo this prime number. Usually, the
  // is chosen large enough so that the aggregation happens over the integers.
  //
  // LINT.IfChange
  optional uint64 prime = 3 [default = 4293918721];
  // LINT.ThenChange(//depot/google3/third_party/private_statistics/prio/constants.h)
  // The number of servers that will be involved in the aggregation.
  //
  // Currently, the library only supports two servers.
  optional int32 number_servers = 4 [default = 2];

  // If specified, the Hamming weight of the vector will be verified during the
  // validity check on the server. Furthermore, the differential privacy noise
  // be selected by replacing the input with a random "hamming_weight"-hot
  // vector with probability 1/(1+e^epsilon).
  // If not specified, the input will be randomized element-wise.
  optional int32 hamming_weight = 5;
}
